http://github.com/github/gitignore - собраны все правила 
.gitignore для разных языков и задач.



echo 'текст' > FILE.TXT Можно прямо из командной строки направлять информацию в фаил, если нет такого фаила то он создает его.



add - Добавление в зону staged,

commit - создание коммита, -m сообение, -a коммитит изменения без добавления add. --amend перезапись последнего коммита.

branch - показывает список веткок.

status - статус.
 


grep - поиск по файлам

log - Показывает коммиты от HEAD~n n-колличаство родителей. 

reflog - показывает все действия в коммитах. и скрытые коммиты.

show - просмотр коммита
checkout - перехот на другую ветку (или репозиторий).( -b создание ветки)

switch - переход на другую ветку.

fetch - Только получает историю из удаленного репозитория.

merge - сливает ветки. 

pull - работает fetch а за тем merge с локальной веткой.

push - сначало merge после отправляет изменения в удаленный репозиторий. Если происходят конфликты то их нужно разрешить.

rebase - перебазирование. тоесть перенос историю коммитов на другую ветку.

reset - откатывает по истории на нужный коммит, --soft без удаление истории,  --hard удаляет историю отката (можно посмотреть в REFLOG)

restore - сброс индекса.удаляет все изменения в файлах.

bisect - Бинарный поиск. Ищет ошибку в истории файлов.

diff - показывает изменения между индексом и последним коммитом. --cached между зоной staged и последним коммитом.

clean - Удаляет неотслеживаемые файлы из рабочего дерева. Если для переменной конфигурации Git clean.requireForce задано значение true, добавьте -f


!не обязательно можно сработать add:
rm - удаление файла в индекс. Для сохранение в коммит.
mv - перемещение файла. Сохранение в коммит.

filter-branch Изменение во всей ветки проэкта с помощью нее можно удалить фаил во всех коммитах проекта.
>git filter-branch --tree-filter 'rm -f passwords.txt' HEAD удаляет файл в каждом коммите.
>git filter-branch --subdirectory-filter trunk HEAD Извеняет корневую папку "trunk"
так же можно изменить global данные например email делается это через скрипт, требует изучения.

revert создает новый коммит изменяя обратно старый 
>git revert -m 1 HEAD последний
! так можно отменить merge commit. Далее после изменения что бы обратно смержить ветки необходимо сделать еще раз revert этого же коммита так мы не потеряем историю коммитов рабочей ветки.

